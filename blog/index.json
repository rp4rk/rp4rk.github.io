{"name":"posts","total":3,"result":[{"title":"Modernising Wordpress","date":"2016-05-11T00:00:00.000Z","description":"Updating Old Wordpress Installs for 2016","author":"Ryan Park","tags":["wordpress","http2","ssl","security","speed","optimization"],"contents":"<p>WordPress can be notoriously bad to work with, especially in cases where you have to work with a client that has an existing install of the software. Between monolithic themes that have been developed using bad practices, and the prevalence of poorly performing hosting, you can spend more time loading pages than doing your job. This was an experience of mine recently, and I&#39;ve taken the liberty of outlining my process for bringing WordPress installs into the present.</p>\n<p>You will likely need to sell your client on a lot of your proposed changes, and this should be easily enough done. What this process offers is top-notch performance, security, and price. The process has three main stages, and each one has the potential to severely impact the performance of WordPress.</p>\n<h2 id=\"hardware-software-or-theme\">Hardware, Software, or Theme</h2>\n<p>Simply put, poor hardware means poor performance. In the client case mentioned earlier, initial load times were 8-20 seconds depending on bandwidth. Of that time loading, 4-6 seconds were spent generating the initial response on the server. When you consider that over 40% of people will close a tab if it doesn&#39;t load within 3 seconds, you can see that this type of situation is dire. Your first hurdle as a developer is to find these problem points and address them appropriately.</p>\n<h3 id=\"addressing-the-hardware\">Addressing the Hardware</h3>\n<p>Generally you will eliminate any and all hardware issues by moving away from &quot;shared hosting&quot; plans, these plans typically share resources between a large amount of websites. What this means is that if you&#39;re placed on a block with a large website, you get less of a share of the resources, leading to performance problems. With a VPS you don&#39;t only get top-notch hardware, but you can choose your own &#39;stack&#39;, and usually this means you can benefit from the latest technologies.</p>\n<h4 id=\"how-to-move\">How to Move</h4>\n<p>Invest in a Virtual Private Server, as a developer you should be confident with being able to deploy and set up a VPS. If you choose providers such as <a href=\"https://m.do.co/c/ce1bd1d9094b\">DigitalOcean</a><sup>1</sup> or <a href=\"https://www.vultr.com/\">Vultr</a> you can get very competitive plans, starting at $5 a month. That&#39;s extremely cheap for the level of performance you get, it competes with even the cheapest shared plans.</p>\n<p>Ideally, each client will have their own VPS, they&#39;re not expensive and you can spin them up effortlessly. Once you&#39;ve done that you need to configure your server. There are tools available such as <a href=\"https://serverpilot.io/\">ServerPilot</a>, or <a href=\"https://www.docker.com/\">Docker</a> that make this really easy even for individuals inexperienced with managing their own servers. Once you&#39;ve done this, it&#39;s a simple matter of migrating your WordPress install across. A tip with ServerPilot is that you can very easily modify their basic install to include SSL.</p>\n<p><sup>1 - This is a referral link that will give you a free $10 on signup, click <a href=\"https://www.digitalocean.com\">here</a> if you aren&#39;t cool with those.</sup></p>\n<h3 id=\"addressing-the-software\">Addressing the Software</h3>\n<p>Software problems are a lot more granular than hardware problems, to address them you must ensure that your point of fault isn&#39;t at a hardware level. Once that is done and you&#39;re confident the problem is not the hardware, you can then continue to the software. As well as this, your fault could exist at one point in software, or across several points - fixing one problem might not entirely solve your performance issues.</p>\n<p>It&#39;s also important to realize that any software problems can exist with your server-side tools, such as with your NGINX configuration - or on the WordPress install itself through the avenue of plugins.</p>\n<h4 id=\"plugins\">Plugins</h4>\n<p>Plugins are a point of fault for a lot of users, there is no strict guarantee with plugins for WordPress that dictates they will work well with others. I would advise installing a plugin profiler, and seeing where the most time is spent in generating your pages. In some cases you may not even be able to disable the problematic plugin in question. Prepare for that eventuality, and realize that there&#39;s no golden gun for this situation, however there are ways to reduce the impact.</p>\n<h4 id=\"serving-wordpress\">Serving WordPress</h4>\n<p>If you&#39;re certain the problem isn&#39;t with a plugin alone, the best option is to go full nuclear on your software stack and re-implement it. For Wordpress in particular this isn&#39;t a problem because your content is completely separate from your stack, and you <em>should</em> have a backup system in place. For the problem client mentioned earlier, this was the single best thing I had done, and switching to PHP7 reduced TTFB by a factor of ten in most cases. The theme was an absolute monster and included many proprietary plugins for functionality, but PHP7 chewed through this and gave an acceptable level of performance.</p>\n<p>On top of this, a strict caching policy for users who aren&#39;t logged in will perform miracles. A user visiting the front page of your website for the first time can have a response ready in under 50ms, compared to maybe 400ms for a non-cached page. This is a pretty huge advantage, especially if your server is coming under heavy load from an influx of visitors, as the server won&#39;t have to generate a response individually for each visitor.</p>\n<h4 id=\"my-server-configuration\">My Server Configuration</h4>\n<p>The configuration I use for client sites is something of a combination of all the suggestions so far:</p>\n<ul>\n<li>WordPress on PHP7 with MariaDB.</li>\n<li>A strict caching policy.</li>\n<li>A SSL and HTTP2 enabled reverse proxy.</li>\n<li>Image optimization.</li>\n</ul>\n<p>With this configuration you eliminate almost all concerns, you get the best security with SSL and you can provide it at no cost to yourself using LetsEncrypt. On top of this, you have caching to provide fast and low-burden responses, along with optimized images, which you can do in bulk using the CLI of your VPS, and then use a plugin to ensure future media is optimized. You also don&#39;t have to worry as much about having a poorly developed theme with no concatenated resources, because HTTP2 multiplexing deals with that issue. This configuration should offer up very competitive performance, at very little cost.</p>\n<h3 id=\"addressing-the-theme\">Addressing the Theme</h3>\n<p>The theme is something that may not be negotiable, you can do your best to clean it up; my advice is to not bother with concatenation and let HTTP2 multiplexing deal with that. On the other hand, you do need to consider some users may have a browser that does not support HTTP2, in that event you might wish to continue on with that.</p>\n<p>This is my checklist to handle the majority of problems:</p>\n<ul>\n<li>Does the theme have significantly oversized images?</li>\n<li>Can I replace any images with SVGs? If yes I proceed to do so. This can save you hundreds of KB.</li>\n<li>Has the client used PNGs where it&#39;s not appropriate? If so convert to JPG.</li>\n<li>Are any redundant files being loaded in?</li>\n</ul>\n<p>Usually this will address most performance problems, I would typically also attempt to dissuade the use of video backgrounds. If you wish to go into further detail with this, you can run a benchmark of the website using the Chrome developer tools, here&#39;s an idea of what you&#39;re looking for:</p>\n<ul>\n<li>Huge file sizes under the network tab.</li>\n<li>Scrolling performance problems, these can be profiled using the timeline.</li>\n<li>Repaint issues, again profiled under the timeline.</li>\n</ul>\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>I realize after writing this that it&#39;s less of a guide and more of a general guideline, that&#39;s fine, a lot of the tips are very solid for guaranteeing a performance level above and beyond what typical shared hosting would give. It&#39;s also a great place to start learning the basics of server management. VPS providers like DigitalOcean have a wealth of documentation available for people working stuff out, and also have a very powerful snapshot feature to ensure you can experiment without worrying about losing everything.</p>\n<p>There is another solution that would be almost free and guarantee top percentile performance. Ask yourself if you need to be using WordPress, if the answer is no, you can always make use of static site generators and GitHub pages. Take a look at my <a href=\"http://ryanpark.co.uk/blog/building-the-blog/\">article about building this website</a> to get a more in depth perspective on the advantages!</p>\n","path":"blog/modernising-wordpress","excerpt":"WordPress can be notoriously bad to work with, especially in cases where you have to work with a client that has an existing install of the software. Betweenâ€¦"},{"title":"Developing With Windows","date":"2016-04-20T00:00:00.000Z","description":"Developing With Windows","author":"Ryan Park","tags":["nodejs","docker","ubuntu"],"contents":"<p>Developing on Windows is a chore for front-end developers, you&#39;ll not go long without having to debug node-gyp and sifting through stacks of solutions trying to find the one for your exact situation. You&#39;ll also encounter the famous 256 character length problem on Windows, when your node_modules nesting exceeds the limit the OS can handle, after that the operating system cannot handle the paths. Another issue exists if you&#39;re used to the terminal, and commands such as <code>grep</code>, <code>ssh</code>, and other functionality doesn&#39;t translate over well.</p>\n<p>There are a number of ways to handle this, as someone who has been extremely frustrated in the past with how a Windows operating system flows during development, I think I&#39;ve found a fairly decent balance for my needs.</p>\n<h3 id=\"acquiring-balance\">Acquiring Balance</h3>\n<p>I have two main devices I develop on, my desktop and my Surface Pro. There <em>may</em> be a simple solution for my problem, installing Ubuntu in some way. Be that either dual booting or formatting my Windows installation, that would work to solve all of my problems with Windows. I am of the inclination that Windows does certain things very well:</p>\n<h4 id=\"running-adobe-cc-software\">Running Adobe CC Software</h4>\n<p>For a standard installation of Ubuntu, you&#39;re stuck with two solutions to this huge gap in software.</p>\n<ol>\n<li>You install WINE and try to use the compatibility layer to run Adobe software, for everything that&#39;s not an outdated version of Photoshop you might not be successful.</li>\n<li>Trying to sift through oceans of outdated or lacking applications, GIMP makes a decent alternative to Photoshop; but I also do a little video editing, After Effects has no equal in that regard.</li>\n</ol>\n<p>These simply aren&#39;t good enough, perhaps if you only needed Photoshop now and again but beware running an application through WINE comes at a heavy performance cost.</p>\n<h4 id=\"documents\">Documents</h4>\n<p>There are a lot of solutions out there for Office-like functionality on Ubuntu, it still has a certain level of sway but not as it once had in the past. However, if you&#39;re looking to do something such as simple PDF annotation, there is nothing remotely close to what is being offered on Windows. Drawboard PDF is an amazing piece of software that I have missed sorely at times.</p>\n<h4 id=\"performance\">Performance</h4>\n<p>Performance on linux is lacking for my specific hardware configuration, for example any video acceleration is severely handicapped by the poor implementation of AMD drivers. As my motherboard doesn&#39;t provide hardware pass-through, this means something such as simple video-editing cannot be hardware accelerated and becomes unbearably slow.</p>\n<h3 id=\"enter-docker\">Enter Docker</h3>\n<p>Docker allows you to split up any application you&#39;re developing into the relevant micro-services. What this means is for something such as a typical Node.js application you can reliably separate it into different containers:</p>\n<ul>\n<li>A container running your Node application.</li>\n<li>A container running Nginx to reverse-proxy to your application.</li>\n<li>A container running your database solution.</li>\n</ul>\n<p>This could be further split down, for example you could split your node application into a client and an API that could then be used to power mobile applications. This has a lot of benefits, but the one that really shines for the development experience is that it normalizes your development and production environments. Your environments will be exactly the same, and using docker-machine allows you to define specific overrides for your production and development environment.</p>\n<p>A basic Dockerfile for a Node application could look something like;</p>\n<pre><code class=\"hljs\">FROM mhart/alpine-node:latest\n\n<span class=\"hljs-comment\"># Copy code into container</span>\nRUN mkdir /app\nWORKDIR /app\nADD /src .\n\n<span class=\"hljs-comment\"># Install Dependencies</span>\nRUN apk <span class=\"hljs-built_in\">add</span> <span class=\"hljs-comment\">--update make gcc g++ python</span>\n\n<span class=\"hljs-comment\"># Install Node Modules as Production</span>\nRUN npm install <span class=\"hljs-comment\">--production</span>\nRUN npm install -g nodemon\n\n<span class=\"hljs-comment\"># Expose the container port</span>\nEXPOSE <span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-comment\"># Start the application</span>\nCMD [<span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"start\"</span>]</code></pre>\n\n<p>This is a straightforward set of instructions, and it allows you to focus on actually developing instead of worrying about constant incompatibility errors with your operating system, conflicts with dependencies from other projects, and other issues that come with not modularizing your project development workflow.</p>\n<p>Of course, there are still situations where setting up this type of workflow is a huge amount of overhead for the task at hand. For example I build this blog with a static site generator on my windows machine without worrying about containers and whatnot, there&#39;s next to no worries about something such as a task runner giving you any trouble. That said, there are certainly unexpected problem areas, such as image processing, which require a docker container to run on windows - but hopefully in the future when the bash implementation for Windows is working well we can throw those fringe cases to the wind.</p>\n","path":"blog/developing-with-windows","excerpt":"Developing on Windows is a chore for front-end developers, you'll not go long without having to debug node-gyp and sifting through stacks of solutions trying toâ€¦"},{"title":"Building the Blog","date":"2016-04-20T00:00:00.000Z","description":"Building Ryanpark.co.uk using Node.js and Metalsmith","author":"Ryan Park","tags":["nodejs","static site","metalsmith","api"],"contents":"<p>I don&#39;t particularly like rebuilding things that I&#39;ve already &#39;completed&#39;, building the new ryanpark.co.uk felt redundant at times; those worries are being dispelled right now as I type. The last iteration of the site supported portfolio posts, and it felt a little lacking that while I had my own space on the internet, I had built it in a way that only allowed one type of content to be posted up.</p>\n<p>I spent hours tweaking <a href=\"https://hexo.io/\">Hexo</a> to support two types of post category, eventually I decided a less opinionated generator was the only way forward. To that end, I found <a href=\"http://www.metalsmith.io/\">Metalsmith</a>, an entirely pluggable static site generator. The change wasn&#39;t radical, in fact they both share a lot of similar functionality, and a lot of the advantages of Hexo are also present in Metalsmith, for example:</p>\n<ul>\n<li>Easy GitHub pages deployment.</li>\n<li>Secure.</li>\n<li>Fast.</li>\n<li>Asset management is native.</li>\n</ul>\n<p>These will be shared by almost all static site generators, and it&#39;s great! There&#39;s absolutely no requirement for a monolithic solution like WordPress, I don&#39;t need to worry about constantly updating any plugins, breaches, or spam bots. The functionality drawback just isn&#39;t there with services like DISQUS providing comments that would usually require a non-static solution.</p>\n<h3 id=\"forging-iron\">Forging Iron</h3>\n<p>I&#39;m not a huge fan of Yeoman, but it takes a lot of the time consuming logistics out of starting a new project in relatively unfamiliar territory. That does come with the caveat of being entirely dependent on the quality of the generator used, but <a href=\"https://github.com/eddywashere/generator-ironsmith\">Ironsmith</a> proved to be an extremely solid choice.</p>\n<p>After using Ironsmith you&#39;re in a position to start writing your content straight away and get publishing. You&#39;ll notice that ryanpark.co.uk has a lot of extras built in to make it a little more personal. The changes include:</p>\n<ul>\n<li>Blog/Portfolio separation, each post type is unique.</li>\n<li>Portfolio cover images.</li>\n<li>Nerdy greetings changer.</li>\n<li>The bookshelf.</li>\n</ul>\n<h3 id=\"why-a-static-site-\">Why a Static Site?</h3>\n<p>As mentioned earlier, static site generators are fast, secure, and easy to deploy. Those are great advantages, but nothing is better than the developer experience in my opinion. If I&#39;m working with WordPress I&#39;m dealing with PHP, databases, reverse proxies, and other server side nastiness. If I build a static site, I&#39;m dealing with technologies I&#39;m more familiar with; JavaScript, SASS, and HTML. This leads to me being able to tweak more without worrying about being constrained by software, which lets me have a site that I can actually call my own.</p>\n<p>I would definitely recommend looking into static site generators for yourself, they&#39;re literally free to get going and the performance is top-notch. As I&#39;ve said, there is barely a functionality compromise, and with GitHub pages the most notable problem is the lack of SSL. That&#39;s still not a reason to completely disregard them though!</p>\n","path":"blog/building-the-blog","excerpt":"I don't particularly like rebuilding things that I've already 'completed', building the new ryanpark.co.uk felt redundant at times; those worries are beingâ€¦"}],"type":"list"}